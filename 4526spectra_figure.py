#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Dec 28 12:44:32 2018

@author: lyoung

Purpose: make a figure showing all the detected lines in ngc4526.
Also computes line ratios using the global spectra and does that in K units.
Some gymnastics are associated with parsing the output file generated by casaviewer.

TO DO

  
"""

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.ticker import AutoMinorLocator

# where to find files & stuff
myDir = 'projects/alma4526/'

plotflipped = False # plot the version mirrored about the systemic velocity (just for eyeballing asymmetry)

vsys = 615.2 # see foldspectra.py
labels = ['12CO','13CO','C18O','HCN','HCO+','HNC','CS','HNCO','CH3OH','CN32','CN12','12CO 2-1','HNCO54']
restfreqs = [115.27120180, 110.2013543, 109.7821734, 88.631601, 89.188526, 90.663564, 97.9809533, 87.925237, 96.741375, 113.49097, 113.17049150, 230.53800000,109.9057490]

# master text file generated by casaviewer contains all the integrated spectra for all lines
filename = 'disk_region_careful_morechans+12co_spec.txt'
myfile = open(filename, 'r')
contents = myfile.readlines()
myfile.close()

# for comparison: the spectra generated from masked cubes.
filename2 = 'maskedby13co+12co+hnco54_spec.txt'
myfile2 = open(filename2, 'r')
contents2 = myfile2.readlines()
myfile2.close()

linenames = []
formattedlinenames = []
startingrows = []

# make a first pass through the file, find out how many lines we have to read and where they start/stop
# first 7 lines are just header stuff
for i in range(7, len(contents)):
    if (contents[i] != '\n'): # we have something to read
        if (contents[i][0:2] == '# '):   # this is the start of a new species
            blah = contents[i].split()[1].split('_')[0].upper()
            linenames.append(blah)
            formattedlinenames.append(blah)
            startingrows.append(i+1)
num_rows = np.diff(np.append(startingrows,len(contents)))
# the comparison masked spectra file is not in the same order so we have to do this over again on the other file
linenames2 = []
startingrows2 = []
for i in range(7, len(contents2)):
    if (contents2[i] != '\n'): # we have something to read
        if (contents2[i][0:2] == '# '):   # this is the start of a new species
            linenames2.append(contents2[i].split()[1].split('_')[0].upper())
            startingrows2.append(i+1)
num_rows2 = np.diff(np.append(startingrows2,len(contents2)))
            
# prep for plotting and summing
panels = plt.figure('panels', figsize=(10,6))
linesums = []
lineuncs = []
linesums2 = []
lineuncs2 = []
linenames.append('CN32')
linenames.append('CN12')
linenames.append('12CO 2-1')
linenames.append('HNCO54')
formattedlinenames.append('CN(3/2-1/2)')  # formatting business is just cosmetic for the plots
formattedlinenames.append('CN(1/2-1/2)')
formattedlinenames.append('$^{12}$CO(2-1)')
formattedlinenames.append('HNCO(5-4)')
formattedlinenames[linenames.index('CH3OH')] = 'CH$_3$OH'
formattedlinenames[linenames.index('12CO')] = '$^{12}$CO(1-0)'
formattedlinenames[linenames.index('13CO')] = '$^{13}$CO'
formattedlinenames[linenames.index('C18O')] = 'C$^{18}$O'
formattedlinenames[linenames.index('HCO+')] = 'HCO$^+$'
formattedlinenames[linenames.index('HNCO')] = 'HNCO(4-3)'


# second pass through the file: read the spectra and plot the spectra
positions = [7,6,5,8,10,2,3,11,1,9,9,4,12] # attempt to control the order of the panels in the plot
print('Line sums are in units of Jy km/s.  Be careful if you want to do ratios.')
for i in range(len(linenames)):
    # set up channels to use for summing & noise
    if (linenames[i][0:2] == 'CN'):
        # CN lines have different channels from the rest
        # in CN32 na cube the channels you want are: 0-6 should be blanked, 7-27 can be line, 28-40 can be noise.
        # cn12 na use 0-8 for line-free, 9(or 10?)-30 for the line, 31-40 should be blanked (wrong line)
        if (linenames[i] == 'CN32'):
            linestartchan = 8
            linestopchan = 26
            blankme1, blankme2 = 0, 6  # these are specific to the CN lines for excising the other line
            loc = 8 # for legend
            spec = np.genfromtxt(myDir+'cn32_na.spec.txt', dtype=None, usecols=(0,1), names=['vel','flux'], \
                         comments='#')
            spec['flux'][0:linestartchan] = 0.0 # remember it won't do the last element 
            noise = spec['flux'][linestopchan+1:]
        else: # CN12
            linestartchan = 10
            linestopchan = 28
            blankme1, blankme2 = 31, 40
            loc = 8 # for legend
            spec = np.genfromtxt(myDir+'cn12_na.spec.txt', dtype=None, usecols=(0,1), names=['vel','flux'], \
                         comments='#')
            spec['flux'][blankme1:] = 0.0
            noise = spec['flux'][0:linestartchan]  
    elif (linenames[i]=='12CO 2-1'):
        # note your choice here whether to use original version or continuum subtracted
        spec = np.genfromtxt(myDir+'12co21_contsub.spec.txt', usecols=[0,1], names=['vel','flux'],\
                       comments='#', dtype=None)
        linestartchan = 7
        linestopchan = 80
        loc = 9
        noise = np.append(spec['flux'][0:linestartchan],spec['flux'][linestopchan+1:])
    elif (linenames[i]=='HNCO54'):
        spec = np.genfromtxt(myDir+'hnco54_unmasked_spec.txt', dtype=None, usecols=(0,1), names=['vel','flux'], comments='#')
        loc = 9
        linestartchan = 15
        linestopchan = 63
        noise = spec['flux'][30:50] # this unmasked spectrum will be useless anyway so it doesn't matter
    else:  # everything other than the CN lines or 2-1 or HNCO
        linestartchan = 15
        linestopchan = 63
        masknoisechan1, masknoisechan2 = 30, 45 # see notes in analysisnotes.rtf about using roughly flat middle of spec for a noise estimate when there are no line-free channels
        readstart = startingrows[i]
        readstop = num_rows[i]-2
        loc = 9 # for legend
        spec = np.genfromtxt(myDir+filename, dtype=None, usecols=(0,1), names=['vel','flux'], \
                         skip_header=readstart, max_rows=readstop)
        noise = np.append(spec['flux'][0:linestartchan],spec['flux'][linestopchan+1:])
    # ready to do calcs
    sigma = np.std(noise)
    chanwid = np.median(np.abs(np.diff(spec['vel'])))
    linesum = np.sum(spec['flux'][linestartchan:linestopchan+1]) * chanwid # units are Jy*km/s 
    lineunc = sigma * chanwid * np.sqrt(linestopchan-linestartchan+1)
    print(linenames[i], 'chanwid', chanwid, 'rms %.4f'%sigma, 'sum %.2f +- %.2f'%(linesum,lineunc))
    linesums.append(linesum)
    lineuncs.append(lineunc)
    if (linenames[i] == '13CO'):
        linesum13co = linesum
        lineunc13co = lineunc
    if (linenames[i] == '12CO'):
        linesum12co = linesum
        lineunc12co = lineunc
    # plot the unmasked spectra
    if (linenames[i] == 'CN12'):
        # the cn12 line goes on top of the previous panel with a different linestyle
        plt.plot(spec['vel'], spec['flux']*1000, drawstyle='steps-mid', label=formattedlinenames[i], color='blue', linestyle='--')
        plt.ylim(-4,17)
    elif(linenames[i] == 'HNCO54'):
        # don't plot the whole-region spectrum, it's too contaminated and you can't see what's going on
        panels.add_subplot(3,4,positions[i], label=i)
        plt.plot([0],[0], label=formattedlinenames[i])
    else:
        # most lines get their own panel and a solid blue line
        panels.add_subplot(3,4,positions[i], label=i)
        plt.plot(spec['vel'], spec['flux']*1000, drawstyle='steps-mid', label=formattedlinenames[i], color='blue')
    ax = plt.gca()
    ax.yaxis.set_minor_locator(AutoMinorLocator(2))
    ax.xaxis.set_minor_locator(AutoMinorLocator(5))
    ax.tick_params(which='both', direction='in', top=True, right=True)
    plt.axhline(0.0, color='k', linestyle=':')
    # sanity check velocity range to sum: it looks good
    # plt.axvspan(spec['vel'][linestartchan],spec['vel'][linestopchan], color='k', alpha=0.1)
    plt.xlim(0,1300)
    leg = plt.legend(frameon=False, handlelength=0, handletextpad=0, loc=loc)
    for item in leg.legendHandles:
            item.set_visible(False)
    # find the corresponding one in the masked version.  read, sum, plot.
    try:
        findme2 = linenames2.index(linenames[i])
    except:
        linesums2.append(0.001)
        lineuncs2.append(0.0)
    else:
        spec2 = np.genfromtxt(myDir+filename2, dtype=None, usecols=(0,1), names=['vel','flux'], \
                              skip_header=startingrows2[findme2], max_rows=num_rows2[findme2]-2)
        noise2 = spec2['flux'][masknoisechan1:masknoisechan2]
        sigma2 = np.std(noise2)
        chanwid2 = np.median(np.abs(np.diff(spec2['vel']))) # probably redundant
        linesum2 = np.sum(spec2['flux']) * chanwid2 # units are Jy*km/s (line-free channels are zero)
        lineunc2 = sigma2 * chanwid2 * np.sqrt(np.sum(spec2['flux']!=0.0))
        print(linenames2[findme2], 'chanwid', chanwid2, 'rms %.4f'%sigma2, 'sum %.2f +- %.2f'%(linesum2,lineunc2))
        linesums2.append(linesum2)  # these are the masked versions
        lineuncs2.append(lineunc2)
        plt.plot(spec2['vel'], spec2['flux']*1000, drawstyle='steps-mid', color='orange')
    if (linenames[i] == '13CO'):
        linesum13co2 = linesum2  # masked versions again
        lineunc13co2 = lineunc2
    if (linenames[i] == '12CO'): 
        linesum12co2 = linesum2
        lineunc12co2 = lineunc2
        if (plotflipped):
            # plot the flipped spectrum
            newvels = spec['vel'] - vsys
            flipvels = -1.*newvels
            plt.plot(flipvels+vsys, spec['flux']*1000, drawstyle='steps-mid', color='yellowgreen')
    
    
plt.figure('panels')
panels.tight_layout()
panels.subplots_adjust(wspace=0.25,hspace=0.25)
bigax = panels.add_subplot(111, frame_on=False)
plt.tick_params(labelcolor='none', top=False, bottom=False, left=False, right=False)
bigax.set_xlabel('Velocity (km s$^{-1}$)', labelpad=-5) # Use argument `labelpad` to move label downwards.
bigax.set_ylabel('Flux Density (mJy)', labelpad=0)
mystring = filename.split('.')[0]
panels.savefig(mystring+'_panels.pdf')

restfreq13co = restfreqs[labels.index('13CO')]
restfreq12co = restfreqs[labels.index('12CO')]
print('Line ratios below here have been corrected to be in units of K km/s')
for i in range(len(linenames)):
    findme = labels.index(linenames[i])  # see above for this list of lines and frequencies
    restfreq = restfreqs[findme]
    ratio = (linesum13co/linesums[i]) * (restfreq/restfreq13co)**2  # the last part converts to ratio in K units
    ratioerr = ratio * np.sqrt((lineuncs[i]/linesums[i])**2 + (lineunc13co/linesum13co)**2)
    print('13CO/%s nomask %.2f +- %.3f'%(linenames[i],ratio,ratioerr))
    ratio2 = (linesum13co2/linesums2[i]) * (restfreq/restfreq13co)**2  # the last part converts to ratio in K units
    ratioerr2 = ratio2 * np.sqrt((lineuncs2[i]/linesums2[i])**2 + (lineunc13co2/linesum13co2)**2)
    print('13CO/%s w/mask %.2f +- %.3f'%(linenames[i],ratio2,ratioerr2))
for i in range(len(linenames)):
    findme = labels.index(linenames[i])  # see above for this list of lines and frequencies
    restfreq = restfreqs[findme]
    ratio = (linesum12co/linesums[i]) * (restfreq/restfreq12co)**2  # the last part converts to ratio in K units
    ratioerr = ratio * np.sqrt((lineuncs[i]/linesums[i])**2 + (lineunc12co/linesum12co)**2)
    print('12CO/%s nomask %.2f +- %.3f'%(linenames[i],ratio,ratioerr))
    ratio2 = (linesum12co2/linesums2[i]) * (restfreq/restfreq12co)**2  # the last part converts to ratio in K units
    ratioerr2 = ratio2 * np.sqrt((lineuncs2[i]/linesums2[i])**2 + (lineunc12co2/linesum12co2)**2)
    print('12CO/%s w/mask %.2f +- %.3f'%(linenames[i],ratio2,ratioerr2))
    
    
